{"version":3,"sources":["components/admin/nav.jsx","components/admin/sidebar.jsx","components/admin/home.jsx","components/admin.js","App.js","serviceWorker.js","index.js"],"names":["AdminNav","Navbar","className","expand","variant","sticky","fixed","bg","Brand","href","Form","Control","type","placeholder","Nav","Item","Link","Component","AdminSidebar","to","data-feather","AdminHome","Admin","Feather","replace","Container","fluid","Row","Col","md","role","this","props","children","App","exact","path","component","match","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8WAGqBA,E,iLAGjB,OACE,kBAACC,EAAA,EAAD,CAAQC,UAAU,4BAA4BC,OAAO,QAAQC,QAAQ,OAAOC,OAAO,MAAMC,MAAM,MAAMC,GAAG,QACtG,kBAACN,EAAA,EAAOO,MAAR,CAAcN,UAAU,yBAAyBO,KAAK,KAAtD,WACA,kBAACC,EAAA,EAAKC,QAAN,CAAcC,KAAK,OAAOV,UAAU,0BAA0BW,YAAY,WAC1E,kBAACC,EAAA,EAAD,CAAKZ,UAAU,QACb,kBAACY,EAAA,EAAIC,KAAL,CAAUb,UAAU,eAClB,kBAACY,EAAA,EAAIE,KAAL,CAAUP,KAAK,KAAf,mB,GAT0BQ,aCCjBC,E,iLAGjB,OACE,yBAAKhB,UAAU,kBACb,kBAACY,EAAA,EAAD,CAAKZ,UAAU,eACb,kBAACY,EAAA,EAAIC,KAAL,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAMI,GAAE,UAAajB,UAAU,mBAAkB,0BAAMkB,eAAa,SAApE,aACA,kBAAC,IAAD,CAAMD,GAAE,gBAAmBjB,UAAU,YAAW,0BAAMkB,eAAa,YAAnE,UACA,kBAAC,IAAD,CAAMD,GAAE,cAAiBjB,UAAU,YAAW,0BAAMkB,eAAa,QAAjE,eACA,kBAAC,IAAD,CAAMD,GAAE,YAAejB,UAAU,YAAW,0BAAMkB,eAAa,UAA/D,aACA,kBAAC,IAAD,CAAMD,GAAE,UAAajB,UAAU,YAAW,0BAAMkB,eAAa,cAA7D,mB,GAZ4BH,aCFrBI,E,+NAOjB,OACE,wBAAInB,UAAU,MAAd,Y,GARiCe,aCQlBK,E,4LAGjBC,IAAQC,Y,+BAKR,OACE,oCACE,kBAAC,EAAD,MACA,kBAACC,EAAA,EAAD,CAAWC,MAAM,QACf,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAG,IAAI3B,UAAU,sCACpB,kBAAC,EAAD,OAEF,0BAAM4B,KAAK,OAAO5B,UAAU,2CACxB6B,KAAKC,MAAMC,iB,GAjBQhB,aCgBpBiB,MAnBf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAAC,IAAD,CAAMjB,GAAG,UAAT,UAEF,kBAAC,IAAD,CAAOiB,KAAK,UACV,kBAAC,EAAD,KACE,kBAAC,IAAD,CAAOC,UAAW,cAAGC,MAAH,OACd,kBAAC,IAAD,CAAOF,KAAK,IAAIC,UAAYhB,YCLxBkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASJ,MACvB,2DCZNK,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.476876a1.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { Navbar, Nav, Form } from 'react-bootstrap'\r\n\r\nexport default class AdminNav extends Component {\r\n\r\n  render(){\r\n    return (\r\n      <Navbar className=\"flex-md-nowrap p-0 shadow\" expand=\"false\" variant=\"dark\" sticky=\"top\" fixed=\"top\" bg=\"dark\">\r\n        <Navbar.Brand className=\"col-sm-3 col-md-2 mr-0\" href=\"#\">OpenRMS</Navbar.Brand>\r\n        <Form.Control type=\"text\" className=\"form-control-dark w-100\" placeholder=\"Search\" />\r\n        <Nav className=\"px-3\">\r\n          <Nav.Item className=\"text-nowrap\">\r\n            <Nav.Link href=\"#\">Sign Out</Nav.Link>\r\n          </Nav.Item>\r\n        </Nav>\r\n      </Navbar>\r\n    )\r\n  }\r\n\r\n}","import React, { Component } from 'react'\r\nimport { Nav } from 'react-bootstrap'\r\nimport { BrowserRouter as Router, Link } from 'react-router-dom'\r\n\r\nexport default class AdminSidebar extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"sidebar-sticky\">\r\n        <Nav className=\"flex-column\">\r\n          <Nav.Item>\r\n            <Router>\r\n              <Link to={`/admin/`} className=\"nav-link active\"><span data-feather=\"home\"></span>Dashboard</Link>\r\n              <Link to={`/admin/orders`} className=\"nav-link\"><span data-feather=\"archive\"></span>Orders</Link>\r\n              <Link to={`restaurants`} className=\"nav-link\"><span data-feather=\"map\"></span>Restaurants</Link>\r\n              <Link to={`employees`} className=\"nav-link\"><span data-feather=\"users\"></span>Employees</Link>\r\n              <Link to={`recipes`} className=\"nav-link\"><span data-feather=\"clipboard\"></span>Recipes</Link>\r\n            </Router>\r\n          </Nav.Item>\r\n        </Nav>\r\n      </div>\r\n    )\r\n  }\r\n\r\n}","import React, { Component } from 'react'\r\n\r\nexport default class AdminHome extends Component {\r\n\r\n  componentWillMount() {\r\n    \r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <h1 className=\"h2\">Home</h1>\r\n    )\r\n  }\r\n\r\n}","import React, { Component } from 'react'\r\nimport axios from 'axios'\r\nimport { Container, Row, Col } from 'react-bootstrap'\r\nimport Feather from 'feather-icons'\r\nimport '../styles/admin/admin.scss'\r\n\r\nimport AdminNav from './admin/nav'\r\nimport AdminSidebar from './admin/sidebar'\r\nimport AdminHome from './admin/home'\r\n\r\nexport default class Admin extends Component {\r\n\r\n  componentDidMount() {\r\n    Feather.replace()\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <>\r\n        <AdminNav />\r\n        <Container fluid=\"true\">\r\n          <Row>\r\n            <Col md=\"2\" className=\"d-none d-md-block bg-light sidebar\">\r\n              <AdminSidebar />\r\n            </Col>\r\n            <main role=\"main\" className=\"col-md-9 ml-sm-auto col-lg-10 pt-3 px-4\">\r\n              { this.props.children }\r\n            </main>\r\n          </Row>\r\n        </Container>\r\n      </>\r\n    )\r\n  }\r\n\r\n}\r\n\r\n","import React from 'react'\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nimport Admin from './components/admin'\nimport AdminHome from './components/admin/home'\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\">\n          <Link to=\"/admin\">Admin</Link>\n        </Route>\n        <Route path='/admin'>\n          <Admin>\n            <Route component={({ match }) =>\n                <Route path='/' component={ AdminHome } />\n            } />\n          </Admin>\n        </Route>\n      </Switch>\n    </Router>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}